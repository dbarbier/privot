test : default constructor and string converter
triangularMatrix0 =  class=TriangularComplexMatrix dimension=0 implementation=class=ComplexMatrixImplementation name=Unnamed rows=0 columns=0 values=[]
test : constructor with size, operator() and string converter
triangularMatrix1 =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(1,0),(3,1),(0,0),(4,0)]
test : copy constructor and string converter
triangularMatrix2 =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(1,0),(3,1),(0,0),(4,0)]
test : get dimensions methods
triangularMatrix1's nbRows =  2
triangularMatrix1's nbColumns =  2
isLower?  True
test  : transpose and conjugate methods
triangularMatrix1 conjugate =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(1,-0),(3,-1),(0,-0),(4,-0)]
is conjugate Lower?  True
triangularMatrix1 transpose =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(1,0),(0,0),(3,1),(4,0)]
is transpose Lower?  False
triangularMatrix1 conjugate and transpose =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(1,-0),(0,-0),(3,-1),(4,-0)]
is conjugate Lower?  False
test : addition method
sum1 =  class=SquareComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(2,0),(3,1),(3,-1),(8,0)]
sum2 =  class=SquareComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(2,0),(3,1),(3,-1),(8,0)]
sum1 equals sum2 =  True
test : substraction method
diff =  class=SquareComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(0,0),(3,1),(-3,1),(0,0)]
test : matrix multiplication method
prod =  class=SquareComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(1,0),(3,1),(3,-1),(26,0)]
test : multiplication with a numerical point method
pt =  class=NumericalPoint name=Unnamed dimension=2 values=[1,2]
ptResult =  [(1,0),(11,1)]
test : multiplication and division by a numerical scalar methods
scalprod =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(3,2),(7,9),(0,0),(12,8)]
scaldiv1 =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(0.230769,-0.153846),(0.846154,-0.230769),(0,0),(0.923077,-0.615385)]
scaldiv2 =  class=TriangularComplexMatrix dimension=2 implementation=class=ComplexMatrixImplementation name=Unnamed rows=2 columns=2 values=[(0.230769,-0.153846),(0.846154,-0.230769),(0,0),(0.923077,-0.615385)]
scaldiv1 equals scaldiv2 =  True
test : isEmpty method
triangularMatrix0 is empty =  True
triangularMatrix1 is empty =  False
triangularMatrix5 is empty =  True
