> restart:
> Ca:=proc(alpha,r,N)
>   local sum, i, k;
>   sum:=0;
>   for i from N-r+1 to N do
>     k:=binomial(N,i)*alpha^i*(1-alpha)^(N-i);
>     sum:=sum+k;
> #    print([i,k,sum]);
>   od:
>   return evalf(1-sum)
> end:
> Ca2:=proc(alpha,r,N)
>   local sum, i, k;
>   sum:=0;
>   for i from 0 to r-1 do
>     k:=binomial(N,N-r+1+i)*alpha^(N-r+1+i)*(1-alpha)^(r-1-i);
>     sum:=sum+k;
>     print([i,k,sum]);
>   od:
>   return evalf(1-sum)
> end:
> with(Statistics):
> Nmax:=200:
> alpha:=0.95;
> beta:=0.95;
> tb:=Quantile(Normal(0,1),beta):
> for r from 1 to 4 do
> Nini:=ceil(-1/2*(alpha*tb^2+2*r-2+(alpha*tb^2*(alpha*tb^2+4*r-4))^(1/2
> ))/(alpha-1));
> for N from Nini to Nmax do
>   y:=Ca(alpha,r,N);
>   x:=Ca2(alpha,r,N);
>   if (x>beta) then
>     print([N,x,y]);break;
>   fi:
> od:
> od:
> evalf[100](Beta(N-r,r+1)*CDF(Beta(N-r,r+1),alpha)*N!/(N-r-1)!/r!);
> 

                            alpha := 0.95


                             beta := 0.95


                  [0, 0.06944284019, 0.06944284019]


                  [0, 0.06597069818, 0.06597069818]


                  [0, 0.06267216327, 0.06267216327]


                  [0, 0.05953855511, 0.05953855511]


                  [0, 0.05656162735, 0.05656162735]


                  [0, 0.05373354598, 0.05373354598]


                  [0, 0.05104686868, 0.05104686868]


                  [0, 0.04849452525, 0.04849452525]


                   [59, 0.9515054748, 0.9515054748]


                  [0, 0.05281038235, 0.05281038235]


                  [1, 0.01153330189, 0.06434368424]


                  [0, 0.05074652830, 0.05074652830]


                  [1, 0.01095663680, 0.06170316510]


                  [0, 0.04875703376, 0.04875703376]


                  [1, 0.01040880496, 0.05916583872]


                  [0, 0.04683962232, 0.04683962232]


                  [1, 0.009888364710, 0.05672798703]


                  [0, 0.04499205943, 0.04499205943]


                  [1, 0.009393946474, 0.05438600590]


                  [0, 0.04321215378, 0.04321215378]


                  [1, 0.008924249150, 0.05213640293]


                  [0, 0.04149775855, 0.04149775855]


                  [1, 0.008478036693, 0.04997579524]


                   [93, 0.9500242048, 0.9500242048]


                  [0, 0.04496929670, 0.04496929670]


                  [1, 0.01460541260, 0.05957470930]


                  [2, 0.002351718979, 0.06192642828]


                  [0, 0.04345110250, 0.04345110250]


                  [1, 0.01399272792, 0.05744383042]


                  [2, 0.002234133030, 0.05967796345]


                  [0, 0.04197818378, 0.04197818378]


                  [1, 0.01340479818, 0.05538298196]


                  [2, 0.002122426379, 0.05750540834]


                  [0, 0.04054951450, 0.04054951450]


                  [1, 0.01284067960, 0.05339019410]


                  [2, 0.002016305060, 0.05540649916]


                  [0, 0.03916407275, 0.03916407275]


                  [1, 0.01229946086, 0.05146353361]


                  [2, 0.001915489807, 0.05337902342]


                  [0, 0.03782084218, 0.03782084218]


                  [1, 0.01178026232, 0.04960110450]


                  [2, 0.001819715316, 0.05142081982]


                  [0, 0.03651881318, 0.03651881318]


                  [1, 0.01128223496, 0.04780104814]


                  [2, 0.001728729551, 0.04952977769]


                  [124, 0.9504702223, 0.9504702223]


                  [0, 0.04017872184, 0.04017872184]


                  [1, 0.01579439410, 0.05597311594]


                  [2, 0.004110869698, 0.06008398564]


                 [3, 0.0005313368998, 0.06061532254]


                  [0, 0.03895950546, 0.03895950546]


                  [1, 0.01521021788, 0.05416972334]


                  [2, 0.003931893058, 0.05810161640]


                 [3, 0.0005047700548, 0.05860638645]


                  [0, 0.03777204108, 0.03777204108]


                  [1, 0.01464630164, 0.05241834272]


                  [2, 0.003760536908, 0.05617887963]


                 [3, 0.0004795315521, 0.05665841118]


                  [0, 0.03661575411, 0.03661575411]


                  [1, 0.01410201340, 0.05071776751]


                  [2, 0.003596486641, 0.05431425415]


                 [3, 0.0004555549745, 0.05476980912]


                  [0, 0.03549006708, 0.03549006708]


                  [1, 0.01357673707, 0.04906680415]


                  [2, 0.003439440058, 0.05250624421]


                 [3, 0.0004327772258, 0.05293902144]


                  [0, 0.03439440058, 0.03439440058]


                  [1, 0.01306987222, 0.04746427280]


                  [2, 0.003289106916, 0.05075337972]


                 [3, 0.0004111383645, 0.05116451808]


                  [0, 0.03332817416, 0.03332817416]


                  [1, 0.01258083396, 0.04590900812]


                  [2, 0.003145208488, 0.04905421661]


                 [3, 0.0003905814462, 0.04944479806]


                  [153, 0.9505552019, 0.9505552019]


  1.00000000000000000000000000000000000000000000000000000000000000\
        0000000000000000000000000000000000000

> ia:=n*Alpha+tb*sqrt(n*Alpha*(1-Alpha));
> sol:=solve(ia=n-R+1,n);
> factor(sol[1]);
> factor(sol[2]);

                                                     1/2
             ia := n Alpha + tb (n Alpha (1 - Alpha))

Warning, solutions may have been lost


         /          2
         |  Alpha tb
  sol := |- --------- - R + 1
         \      2

                 2   4             2               2 1/2\
           (Alpha  tb  + 4 Alpha tb  R - 4 Alpha tb )   |
         + ---------------------------------------------|/(Alpha - 1)
                                 2                      /

          /          2
          |  Alpha tb
        , |- --------- - R + 1
          \      2

                 2   4             2               2 1/2\
           (Alpha  tb  + 4 Alpha tb  R - 4 Alpha tb )   |
         - ---------------------------------------------|/(Alpha - 1)
                                 2                      /


              2                      2          2            1/2
     -Alpha tb  - 2 R + 2 + (Alpha tb  (Alpha tb  + 4 R - 4))
     -----------------------------------------------------------
                            2 (Alpha - 1)


               2                      2          2            1/2
       Alpha tb  + 2 R - 2 + (Alpha tb  (Alpha tb  + 4 R - 4))
     - ----------------------------------------------------------
                             2 (Alpha - 1)

> solve(subs(Alpha=alpha, R=4,
> tb=Quantile(Normal(0,1),beta),ia=n-R+1),n);

                             146.8986301

> restart:assume(N,integer,r,integer,r<N,alpha>0,alpha<1,i>0,i<r):ratio:
> =convert(simplify((binomial(N,N-r+1+i)*alpha^(N-r+1+i)*(1-alpha)^(r-1-
> i))/(binomial(N+1,N+1-r+1+i)*alpha^(N+1-r+1+i)*(1-alpha)^(r-1-i)),symb
> olic),factorial);

                           N~! (N~ + 2 - r~ + i~)!
            ratio := ------------------------------------
                     (N~ - r~ + 1 + i~)! alpha~ (N~ + 1)!

> q:=(N+2-r+i)/(N+1)/alpha;

                             N~ + 2 - r~ + i~
                        q := ----------------
                             (N~ + 1) alpha~

> evalf(subs(N=100,r=7,alpha=0.95,i=5,[ratio,q]));

                      [1.042209484, 1.042209484]

> subs(N=N+1,binomial(N,N-r+1+i)*alpha^(N-r+1+i)*(1-alpha)^(r-1-i));

                                           (N~ + 2 - r~ + i~)
  binomial(N~ + 1, N~ + 2 - r~ + i~) alpha~

                    (r~ - 1 - i~)
        (1 - alpha~)

> .5281038235e-1/.1153330189e-1;

                             4.578947369

> 
